#!/bin/bash

# Cherry-Pick Newest Files from release/dev
# This script automatically cherry-picks all newer files from release/dev

set +e  # Don't exit on errors

echo "🍒 Cherry-Pick Newest Files Script"
echo "📋 This will automatically pick all newer files from release/dev"

# Get current branch
CURRENT_BRANCH=$(git branch --show-current)
echo "📍 Current branch: $CURRENT_BRANCH"

# Fetch latest release/dev
echo "🔍 Fetching latest release/dev..."
git fetch origin release/dev

# Get list of all files in release/dev
echo "📂 Analyzing files in release/dev..."
FILES_TO_CHECK=$(git ls-tree -r origin/release/dev --name-only)

# Arrays to track results
declare -a PICKED_FILES
declare -a NEW_FILES
declare -a SKIPPED_FILES

# Compare each file
while IFS= read -r file; do
    if [ -z "$file" ]; then
        continue
    fi
    
    # Get modification time in release/dev
    DEV_TIME=$(git log -1 --format=%ct origin/release/dev -- "$file" 2>/dev/null)
    
    if [ -z "$DEV_TIME" ]; then
        continue
    fi
    
    # Check if file exists in current branch
    if [ -f "$file" ]; then
        # Get modification time in current branch
        CURRENT_TIME=$(git log -1 --format=%ct -- "$file" 2>/dev/null)
        
        if [ -z "$CURRENT_TIME" ]; then
            # File exists but not in git yet
            CURRENT_TIME=0
        fi
        
        # Compare timestamps
        if [ "$DEV_TIME" -gt "$CURRENT_TIME" ]; then
            echo "🔄 Updating: $file (newer in release/dev)"
            # Cherry-pick just this file
            git checkout origin/release/dev -- "$file"
            PICKED_FILES+=("$file")
        else
            SKIPPED_FILES+=("$file")
        fi
    else
        # File doesn't exist in current branch
        echo "✨ Adding new file: $file"
        # Create directory if needed
        mkdir -p "$(dirname "$file")"
        # Get the file from release/dev
        git checkout origin/release/dev -- "$file"
        NEW_FILES+=("$file")
    fi
done <<< "$FILES_TO_CHECK"

# Summary
echo ""
echo "📊 Cherry-Pick Summary:"
echo "━━━━━━━━━━━━━━━━━━━━"

if [ ${#NEW_FILES[@]} -gt 0 ]; then
    echo "✨ New files added: ${#NEW_FILES[@]}"
    for file in "${NEW_FILES[@]}"; do
        echo "   - $file"
    done
fi

if [ ${#PICKED_FILES[@]} -gt 0 ]; then
    echo "🔄 Files updated: ${#PICKED_FILES[@]}"
    for file in "${PICKED_FILES[@]}"; do
        echo "   - $file"
    done
fi

if [ ${#SKIPPED_FILES[@]} -gt 0 ]; then
    echo "⏭️  Files skipped (already up-to-date): ${#SKIPPED_FILES[@]}"
fi

# Stage all changes
if [ ${#NEW_FILES[@]} -gt 0 ] || [ ${#PICKED_FILES[@]} -gt 0 ]; then
    echo ""
    echo "📦 Staging changes..."
    git add .
    
    # Show what will be committed
    echo ""
    echo "📝 Changes to be committed:"
    git status --short
    
    # Commit if there are changes
    if ! git diff --cached --quiet; then
        echo ""
        echo "💾 Creating commit..."
        COMMIT_MSG="Cherry-pick: Auto-sync newest files from release/dev

New files: ${#NEW_FILES[@]}
Updated files: ${#PICKED_FILES[@]}
Skipped files: ${#SKIPPED_FILES[@]}

This commit was automatically generated by cherry-pick-newest.sh"
        
        git commit -m "$COMMIT_MSG"
        echo "✅ Committed successfully!"
    else
        echo "ℹ️  No changes to commit"
    fi
else
    echo "✅ All files are already up-to-date!"
fi

echo ""
echo "🎯 Cherry-pick complete!"