#!/bin/bash
# Web4Articles - Dual Link Fixer v2
# Fixed to use project root paths as per user clarification
# Usage: fix.dual.links.v2 [file-or-directory]

set -e

# Ensure non-interactive mode
export DEBIAN_FRONTEND=noninteractive
export GIT_PAGER=cat
export PAGER=cat

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Find project root
find_project_root() {
    local current_dir="$(pwd)"
    while [[ "$current_dir" != "/" ]]; do
        if [[ -f "$current_dir/.git/config" ]] || [[ -d "$current_dir/.git" ]]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    echo "Error: Not in a git repository" >&2
    exit 1
}

PROJECT_ROOT=$(find_project_root)

# Output header information
printf "%b" "${BLUE}üîß Web4Articles Dual Link Fixer v2${NC}\n"
printf "%b" "${BLUE}üìã Using project root paths (not relative)${NC}\n"
printf "%b" "${BLUE}üéØ Project Root: $PROJECT_ROOT${NC}\n\n"
printf "%b" "${YELLOW}üìå Dual Link Standard:${NC}\n"
printf "%b" "   ${GREEN}[GitHub](URL) | [¬ß/path/from/root](path/from/root)${NC}\n\n"

# Function to fix dual links in a markdown file
fix_markdown_file() {
    local md_file="$1"
    local backup_file="${md_file}.bak"
    
    echo -e "${YELLOW}üìÑ Processing: ${md_file#$PROJECT_ROOT/}${NC}"
    
    # Create backup
    cp "$md_file" "$backup_file"
    
    # Create temporary file for processing
    local temp_file=$(mktemp)
    
    # Process the file line by line
    local changes_made=0
    local line_num=0
    
    while IFS= read -r line; do
        line_num=$((line_num + 1))
        
        # Check if line contains dual link pattern: [GitHub](...) | [local](path)
        if echo "$line" | grep -qE '\[GitHub\]\([^)]+\)[[:space:]]*\|[[:space:]]*\[[^]]*\]\([^)]+\)'; then
            # Extract parts using sed
            local github_url=$(echo "$line" | sed -E 's/.*\[GitHub\]\(([^)]+)\).*/\1/')
            local display_text=$(echo "$line" | sed -E 's/.*\|[[:space:]]*\[([^]]*)\]\([^)]+\).*/\1/')
            local local_path=$(echo "$line" | sed -E 's/.*\|[[:space:]]*\[[^]]*\]\(([^)]+)\).*/\1/')
            
            # Extract the file path from GitHub URL
            # Handle branch names that may contain slashes (like save/start.v1)
            local github_path=""
            github_path=$(echo "$github_url" | sed -E 's|.*/blob/[^/]+/[^/]+/||')
            
            # Determine correct display and path
            local needs_fix=false
            local new_display="$display_text"
            local new_path="$local_path"
            
            # If we have a github path, use it as the source of truth
            if [[ -n "$github_path" ]]; then
                # Display should have ¬ß prefix
                if [[ "$display_text" != "¬ß/"* ]]; then
                    new_display="¬ß/$github_path"
                    needs_fix=true
                fi
                
                # Path should be from project root (no ../ or ./)
                if [[ "$local_path" != "$github_path" ]]; then
                    new_path="$github_path"
                    needs_fix=true
                fi
            fi
            
            if [[ "$needs_fix" == true ]]; then
                # Build the new line
                local new_line="[GitHub]($github_url) | [$new_display]($new_path)"
                
                # Replace the line (preserving any leading whitespace)
                local leading_space="${line%%[![:space:]]*}"
                echo "${leading_space}${new_line}" >> "$temp_file"
                
                changes_made=$((changes_made + 1))
                echo -e "   ${GREEN}‚úÖ Line $line_num: Fixed dual link${NC}"
                echo -e "      Old path: ($local_path)"
                echo -e "      New path: ($new_path)"
            else
                echo "$line" >> "$temp_file"
            fi
        else
            echo "$line" >> "$temp_file"
        fi
    done < "$md_file"
    
    # Replace original file if changes were made
    if [[ $changes_made -gt 0 ]]; then
        mv "$temp_file" "$md_file"
        echo -e "   ${GREEN}‚úÖ Fixed $changes_made dual links${NC}"
        rm "$backup_file"
        return 0
    else
        rm "$temp_file"
        rm "$backup_file"
        echo -e "   ${BLUE}‚ÑπÔ∏è  No dual links needed fixing${NC}"
        return 1
    fi
}

# Function to check if a file should be processed
should_process_file() {
    local file="$1"
    
    # Skip certain directories
    if [[ "$file" == *"/node_modules/"* ]] || \
       [[ "$file" == *"/.git/"* ]] || \
       [[ "$file" == *"/target/"* ]] || \
       [[ "$file" == *"/dist/"* ]] || \
       [[ "$file" == *"/.next/"* ]]; then
        return 1
    fi
    
    # Only process markdown files
    if [[ "$file" == *.md ]]; then
        return 0
    fi
    
    return 1
}

# Main execution
main() {
    local target="${1:-.}"
    
    # Normalize path
    target="$(realpath "$target")"
    
    echo -e "${BLUE}üéØ Target: ${target#$PROJECT_ROOT/}${NC}"
    echo ""
    
    if [[ -f "$target" ]]; then
        # Single file
        if fix_markdown_file "$target"; then
            echo -e "${GREEN}‚úÖ Successfully fixed dual links${NC}"
        else
            echo -e "${BLUE}‚ÑπÔ∏è  No changes needed${NC}"
        fi
    elif [[ -d "$target" ]]; then
        # Directory - process all markdown files
        local total_files=0
        local fixed_files=0
        
        while IFS= read -r -d '' file; do
            if should_process_file "$file"; then
                total_files=$((total_files + 1))
                if fix_markdown_file "$file"; then
                    fixed_files=$((fixed_files + 1))
                fi
                echo ""
            fi
        done < <(find "$target" -type f -name "*.md" -print0 2>/dev/null)
        
        echo -e "${GREEN}üìä Summary: Processed $total_files files, fixed $fixed_files files${NC}"
    else
        echo -e "${RED}‚ùå Target is neither file nor directory: $target${NC}"
        exit 1
    fi
    
    echo ""
    echo -e "${GREEN}üéâ Dual Link fixing complete!${NC}"
}

# Show usage if no args
if [[ $# -eq 0 ]]; then
    echo "Usage: $0 [file-or-directory]"
    echo ""
    echo "Fixes dual links to use project root paths:"
    echo "  [GitHub](URL) | [¬ß/path/from/root](path/from/root)"
    exit 0
fi

main "$@"