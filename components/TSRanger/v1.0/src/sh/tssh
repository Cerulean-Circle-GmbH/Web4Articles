#!/bin/bash

# tssh: Shell wrapper for TSsh TypeScript CLI (strict OOP, class/method/param only)
set -euo pipefail

# Find project root (with package.json and src/ts)
find_project_root() {
  local dir="$PWD"
  while [[ "$dir" != "/" ]]; do
    if [[ -f "$dir/package.json" && -d "$dir/src/ts" ]]; then
      echo "$dir"
      return 0
    fi
    dir="$(dirname "$dir")"
  done
  return 1
}

PROJECT_ROOT="$(find_project_root)"
if [[ -z "$PROJECT_ROOT" ]]; then
  echo "Error: Could not find project root (missing package.json and src/ts)." >&2
  exit 1
fi

SCRIPT_PATH="$(readlink -f "$0" 2>/dev/null || realpath "$0")"
UNIT_PATH="${SCRIPT_PATH#"$PROJECT_ROOT/"}"

TS_NODE_PROJECT="$PROJECT_ROOT/tsconfig.json"
TSSH_ENTRY="$PROJECT_ROOT/src/ts/layer1/TSsh.ts"

export NODE_NO_WARNINGS=1
export TS_NODE_PROJECT

# No arguments: print project info
if [[ $# -eq 0 ]]; then
  echo "Project Root: $PROJECT_ROOT"
  echo "Unit Path: $UNIT_PATH"
  exit 0
fi

# Reject shell-style options
if [[ "$1" == -* ]]; then
  echo "error: shell-style options are not supported"
  exit 0
fi

# Only allow positional invocation: Class Method ...
if [[ "$1" != "TSsh" ]]; then
  echo "error: invalid or unknown command"
  exit 0
fi

# Forward to TypeScript backend via Node ESM loader
if [[ -n "${LOG_LEVEL:-}" && "$LOG_LEVEL" =~ ^[0-9]+$ && "$LOG_LEVEL" -gt 3 ]]; then
  echo "[tssh debug] Running: NODE_NO_WARNINGS=1 node --loader ts-node/esm \"$TSSH_ENTRY\" $*"
fi
exec node --loader ts-node/esm "$TSSH_ENTRY" "$@"
