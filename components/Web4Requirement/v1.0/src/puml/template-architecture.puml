@startuml Template Logic Independence Architecture

!theme aws-orange
skinparam backgroundColor #FAFAFA
skinparam defaultFontSize 11
skinparam defaultFontName "Arial"

title Template Logic Independence Architecture\n**Web4Requirement Component v1.0**

package "Layer 3: Interfaces" as layer3 {
  interface View {
    +render(context: ViewContext): Promise<ViewResult>
    +getTemplatePath?(): string | undefined  
    +setTemplatePath?(path: string): void
  }
  
  interface MDView extends View {
    +renderMD(context: ViewContext): Promise<ViewResult>
    +formatMD(content: string, context: ViewContext): string
  }
  
  interface TemplateProcessor {
    +processTemplate(template: string, context: ViewContext): string
    +loadTemplate(templatePath: string): Promise<string>
  }
  
  class ViewContext {
    +[key: string]: any
  }
  
  class ViewResult {
    +success: boolean
    +content?: string
    +message?: string
    +error?: string
  }
}

package "Layer 2: Implementations" as layer2 {
  class DefaultTemplateProcessor {
    +processTemplate(template: string, context: ViewContext): string
    +loadTemplate(templatePath: string): Promise<string>
    -convertToString(value: any): string
  }
  
  class DefaultMDView {
    #templateProcessor: TemplateProcessor
    #templatePath?: string
    +constructor(templatePath?: string)
    +render(context: ViewContext): Promise<ViewResult>
    +renderMD(context: ViewContext): Promise<ViewResult>
    +formatMD(content: string, context: ViewContext): string
    +getTemplatePath(): string | undefined
    +setTemplatePath(path: string): void
    #resolveTemplatePath(relativePath: string): string
  }
  
  class MDOverview extends DefaultMDView {
    -itemTemplatePath?: string
    +constructor(overviewTemplatePath?: string, itemTemplatePath?: string)
    +renderMD(context: ViewContext): Promise<ViewResult>
    -processItems(itemTemplate: string, context: ViewContext): Promise<string>
    -extractItemContextFromFilename(filename: string, context: ViewContext): Promise<ViewContext>
    -getItemCount(context: ViewContext): number
    +setItemTemplatePath(path: string): void
    +getItemTemplatePath(): string | undefined
  }
  
  class DefaultRequirement {
    -uuid: string
    -_name: string
    -description: string
    -status: RequirementStatus
    +generateMDView(): string
    -generateRequirementsOverview(requirementFiles: string[], outputPath: string): Promise<string>
    +saveMDView(outputPath?: string): Promise<RequirementResult>
    -updateRequirementsOverview(outputPath: string): Promise<void>
  }
}

package "Template Files" as templates {
  file "default.view.md" as defaultTemplate {
    # {{name}}
    ## Requirement Details
    - **UUID:** `{{uuid}}`
    - **Name:** {{name}}
    - **Status:** {{status}}
    ## Description
    {{description}}
  }
  
  file "over.view.md" as overviewTemplate {
    # Requirements Overview
    **Last Updated:** {{timestamp}}
    **Total Requirements:** {{totalCount}}
    ## Requirements List
    {{itemsList}}
  }
  
  file "item.view.md" as itemTemplate {
    1. [{{title}}](./{{filename}}) 
    [requirement:uuid:{{uuid}}] 
    [`{{filename}}`](./{{filename}})
  }
}

' Interface relationships
TemplateProcessor ||..|| DefaultTemplateProcessor : implements
MDView ||..|| DefaultMDView : implements
View ||..|| MDView : extends

' Class relationships
DefaultMDView ||--|| DefaultTemplateProcessor : uses
MDOverview ||--|| DefaultMDView : extends
DefaultRequirement ||--|| DefaultMDView : creates
DefaultRequirement ||--|| MDOverview : creates

' Template usage
DefaultMDView ..> defaultTemplate : loads
MDOverview ..> overviewTemplate : loads  
MDOverview ..> itemTemplate : loads

' Data flow
ViewContext ||..|| View : input
ViewResult ||..|| View : output
ViewContext ||..|| TemplateProcessor : input

note top of View : **Maximum Template Independence**\nLogic is completely separated\nfrom template content
note right of DefaultTemplateProcessor : **Generic Processing**\nWorks with any {{variable}} syntax\nZero template content knowledge
note bottom of MDOverview : **Specialized Only When Needed**\nExtends DefaultMDView only because\noverview requires dual templates
note left of templates : **Template Content**\nCompletely independent from logic\nUsers can modify freely

legend right
  |= Pattern |= Description |
  | Interface Segregation | Clear separation of concerns |
  | Template Independence | Zero coupling to content |
  | Generic Processing | Works with any template |
  | Extensible Design | Easy to add new view types |
  | Backward Compatible | Existing templates unchanged |
endlegend

@enduml
