import * as fs from 'fs';
import path from 'path';
import { Logger } from '../layer1/Logger.ts';

export class TemplateGenerator {
  constructor() {
    // Empty constructor following Web4 principles
  }

  /**
   * Generate CI workflow file for new repository
   */
  generateCIWorkflow(projectName: string, sourceRepoUrl: string): string {
    return `name: CI

on:
  push:
    branches: [ main, dev, "dev/*" ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: \${{ secrets.GITHUB_TOKEN }}
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${projectName}/package-lock.json
    
    - name: Install dependencies
      working-directory: ${projectName}
      run: npm ci
    
    - name: Run tests
      working-directory: ${projectName}
      run: npm test
    
    - name: Run build
      working-directory: ${projectName}
      run: npm run build:n14 || echo "No build script"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: \${{ secrets.GITHUB_TOKEN }}
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${projectName}/package-lock.json
    
    - name: Install dependencies
      working-directory: ${projectName}
      run: npm ci
    
    - name: TypeScript check
      working-directory: ${projectName}
      run: npx tsc --noEmit || echo "No TypeScript config"
`;
  }

  /**
   * Generate recovery documentation for new repository
   */
  generateRecoveryDoc(projectName: string, sourceRepoUrl: string, submodulePath: string): string {
    const currentDate = new Date().toISOString().split('T')[0];
    
    return `# ${projectName} Recovery Documentation

**Created:** ${currentDate}  
**Source:** Generated by Web4Articles GitScrumProject  
**Template:** [Web4Articles](${sourceRepoUrl})  

## ðŸš€ Quick Recovery

### 1. Clone with Submodules
\`\`\`bash
git clone --recursive https://github.com/YOUR_ORG/${projectName}.git
cd ${projectName}
\`\`\`

### 2. Initialize Source Environment
\`\`\`bash
cd ${submodulePath}
source source.env  # Load Web4Articles environment
npm install        # Install dependencies
\`\`\`

### 3. Verify Setup
\`\`\`bash
# Test CLI tools
npm test
npm run tsranger || echo "TSRanger not configured"
\`\`\`

## ðŸ“‹ Project Structure

\`\`\`
${projectName}/
â”œâ”€â”€ .github/workflows/ci.yml     # Automated CI/CD pipeline
â”œâ”€â”€ README.md                    # Project overview
â”œâ”€â”€ recovery.md                  # This file
â””â”€â”€ ${submodulePath}/            # Web4Articles source (submodule)
    â”œâ”€â”€ components/              # Web4 components
    â”œâ”€â”€ scrum.pmo/              # Process management
    â”œâ”€â”€ package.json            # Dependencies
    â””â”€â”€ source.env              # Environment setup
\`\`\`

## ðŸ”§ Development Workflow

### Working with Submodules
\`\`\`bash
# Update source submodule
git submodule update --remote ${submodulePath}

# Work on source changes
cd ${submodulePath}
git checkout -b feature/my-changes
# ... make changes ...
git commit -am "feat: implement changes"
git push origin feature/my-changes

# Update parent project to use new source
cd ..
git add ${submodulePath}
git commit -m "chore: update source to latest"
git push
\`\`\`

### Release Process
\`\`\`bash
# 1. Ensure source is on stable branch/tag
cd ${submodulePath}
git checkout main  # or specific release tag

# 2. Update parent project
cd ..
git add ${submodulePath}
git commit -m "release: update to source v\${VERSION}"
git tag v\${VERSION}
git push origin main --tags
\`\`\`

## ðŸ†˜ Troubleshooting

### Submodule Issues
\`\`\`bash
# Reset submodule to remote state
git submodule update --init --recursive --force

# Re-initialize corrupted submodule
git submodule deinit -f ${submodulePath}
git submodule update --init ${submodulePath}
\`\`\`

### Environment Issues
\`\`\`bash
# Reload Web4Articles environment
cd ${submodulePath}
source source.env

# Check Node.js version compatibility
node --version  # Should be >= 18
npm --version   # Should be >= 9
\`\`\`

---

**Generated by:** Web4Articles GitScrumProject v1.0  
**Template Source:** ${sourceRepoUrl}  
**Documentation:** https://github.com/Cerulean-Circle-GmbH/Web4Articles
`;
  }

  /**
   * Generate README additions for new repository
   */
  generateReadmeAdditions(projectName: string, sourceRepoUrl: string, submodulePath: string): string {
    return `# ${projectName}

A Web4Articles-based project using template architecture with source submodule.

## ðŸš€ Quick Start

\`\`\`bash
git clone --recursive https://github.com/YOUR_ORG/${projectName}.git
cd ${projectName}/${submodulePath}
source source.env
npm install
npm test
\`\`\`

## ðŸ“‹ Architecture

This project uses the Web4Articles template with source code managed as a Git submodule:

- **Wrapper Repository:** Project-specific configuration and documentation
- **Source Submodule:** [Web4Articles](${sourceRepoUrl}) - Core framework and components

## ðŸ”§ Development

See [recovery.md](./recovery.md) for complete development and troubleshooting guide.

## ðŸ“„ License

SPDX-License-Identifier: AGPL-3.0-only + AI-GPL-Addendum  
Copyright (c) 2025 The Web4Articles Authors  

This project inherits licensing from [Web4Articles](${sourceRepoUrl}).
See source submodule for complete license information.
`;
  }

  /**
   * Write generated content to file in target directory
   */
  writeTemplate(targetDir: string, filename: string, content: string): void {
    const filePath = path.join(targetDir, filename);
    const dir = path.dirname(filePath);
    
    // Ensure directory exists
    fs.mkdirSync(dir, { recursive: true });
    
    // Write file
    fs.writeFileSync(filePath, content, 'utf8');
    Logger.log(`[TemplateGenerator] Generated: ${filePath}`, 'info');
  }
}