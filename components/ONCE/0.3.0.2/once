#!/bin/bash

# Web4 ONCE Component Shell Starter
# Checks environment, builds dependencies, delegates to CLI
# Following Build component shell starter pattern

set -euo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
COMPONENT_DIR="$SCRIPT_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "üîó Web4 ONCE Component v0.3.0.0 - Object Network Communication Engine"
echo "üìÇ Component: $COMPONENT_DIR"

# Use Build component for comprehensive build chain
use_build_component() {
    local BUILD_COMPONENT="$COMPONENT_DIR/../../../Build/latest"
    
    if [ -x "$BUILD_COMPONENT/build" ]; then
        echo "üèóÔ∏è Triggering comprehensive build chain for ONCE..."
        
        # Trigger complete build chain for ONCE component
        "$BUILD_COMPONENT/build" buildComponent ONCE || {
            echo -e "${RED}‚ùå Comprehensive build chain failed for ONCE${NC}"
            exit 1
        }
        
        echo -e "${GREEN}‚úÖ Build chain complete - ONCE ready for execution${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Build component not available, using enhanced fallback...${NC}"
        enhanced_fallback_build
    fi
}

# Enhanced fallback build with dependency detection
enhanced_fallback_build() {
    echo "üîç Detecting ONCE component dependencies..."
    
    # Basic environment check
    command -v node >/dev/null 2>&1 || {
        echo -e "${RED}‚ùå Node.js required but not installed${NC}"
        exit 1
    }
    
    command -v npm >/dev/null 2>&1 || {
        echo -e "${RED}‚ùå NPM required but not installed${NC}"
        exit 1
    }
    
    # Build foundation components first (ONCE dependencies)
    build_foundation_if_needed() {
        local FOUNDATION_COMPONENTS=(
            "IOR:/workspace/components/IOR/0.3.0.0"
            "Scenario:/workspace/components/Scenario/0.1.3.0" 
            "User:/workspace/components/User/0.1.3.0"
        )
        
        for comp_info in "${FOUNDATION_COMPONENTS[@]}"; do
            local comp_name="${comp_info%%:*}"
            local comp_path="${comp_info##*:}"
            
            if [ -d "$comp_path" ] && [ ! -d "$comp_path/dist" ]; then
                echo "üî® Building foundation component: $comp_name..."
                cd "$comp_path"
                npm install >/dev/null 2>&1
                npm run build >/dev/null 2>&1 || npx tsc >/dev/null 2>&1
                echo -e "${GREEN}‚úÖ $comp_name built${NC}"
            fi
        done
    }
    
    # Build foundation components
    build_foundation_if_needed
    
    # Build ONCE component
    if [ -f "$COMPONENT_DIR/package.json" ]; then
        echo "üî® Building ONCE component..."
        cd "$COMPONENT_DIR"
        npm install
        npm run build
    fi
    
    echo -e "${GREEN}‚úÖ Enhanced fallback build complete${NC}"
}

# Main execution
main() {
    echo "üîç Setting up ONCE environment..."
    
    # Use Build component for setup
    use_build_component
    
    echo "üöÄ Delegating to ONCE CLI..."
    
    # Delegate all arguments to CLI
    if [ -f "$COMPONENT_DIR/dist/ts/layer5/ONCECLI.js" ]; then
        node "$COMPONENT_DIR/dist/ts/layer5/ONCECLI.js" "$@"
    else
        echo -e "${RED}‚ùå ONCE CLI not found. Build may have failed.${NC}"
        echo "Try running: npm run build"
        exit 1
    fi
}

# Execute with all arguments
main "$@"