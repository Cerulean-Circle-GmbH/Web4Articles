#!/usr/bin/env node

/**
 * Web4 User Component Documentation Generator
 * Generates component documentation in Web4 format
 */

import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

const __dirname = dirname(fileURLToPath(import.meta.url));
const componentRoot = resolve(__dirname, '..');
const docsPath = resolve(componentRoot, 'docs');

console.log('üìö Generating Web4 User component documentation...\n');

// Ensure docs directory exists
if (!existsSync(docsPath)) {
  mkdirSync(docsPath, { recursive: true });
}

// Read package.json for metadata
const pkg = JSON.parse(readFileSync(resolve(componentRoot, 'package.json'), 'utf-8'));

// Get current git info
let gitCommit = 'unknown';
let gitBranch = 'unknown';
try {
  gitCommit = execSync('git rev-parse --short HEAD', { encoding: 'utf-8' }).trim();
  gitBranch = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf-8' }).trim();
} catch (error) {
  console.warn('‚ö†Ô∏è  Could not get git information');
}

// Generate component overview
const overview = `# Web4 User Component Documentation

**Component:** ${pkg.name}  
**Version:** ${pkg.version}  
**Description:** ${pkg.description}  
**Generated:** ${new Date().toISOString()}  
**Git Commit:** ${gitCommit}  
**Git Branch:** ${gitBranch}

## Overview

The Web4 User component provides consistent user identification across the Web4Articles ecosystem. It implements:

- **Empty Constructor Pattern**: Objects created without parameters
- **Scenario-Based Users**: User objects as hibernatable scenarios
- **Deterministic UUIDs**: Consistent UUID generation based on username
- **IOR References**: Support for distributed object references

## Architecture

### Layer Structure
- **Layer 2 (Default Implementation)**: \`DefaultUser.ts\`
- **Layer 3 (Interface)**: \`IUser.ts\`
- **Layer 5 (CLI)**: \`UserCLI.ts\`

### Key Features
1. **Deterministic UUID Generation**: Same username always produces same UUID
2. **Scenario Management**: Import/export user scenarios
3. **Batch Operations**: Fix owner UUIDs across multiple files
4. **CLI Integration**: Full command-line interface

## Usage

### CLI Commands
\`\`\`bash
# Create a new user
user create "username" [hostname]

# Get user UUID
user get "username"

# Fix scenario files
user fix-scenario <file>
user fix-scenarios --all

# List all users
user list
\`\`\`

### Programmatic Usage
\`\`\`typescript
import { DefaultUser } from '@web4/user';

const user = new DefaultUser();
user.setUsername('donges');
user.setHostname('localhost');
const uuid = user.getUuid(); // Deterministic based on username
\`\`\`

## Web4 Compliance

‚úÖ **Empty Constructors**: All objects created without parameters  
‚úÖ **Scenario Objects**: Full state serialization support  
‚úÖ **IOR Support**: Ready for distributed references  
‚úÖ **Self-Management**: Complete lifecycle scripts  

## Scripts

${Object.entries(pkg.scripts || {}).map(([name, cmd]) => `- **${name}**: \`${cmd}\``).join('\n')}

## Dependencies

### Runtime
${Object.entries(pkg.dependencies || {}).map(([name, version]) => `- ${name}: ${version}`).join('\n') || 'None'}

### Development
${Object.entries(pkg.devDependencies || {}).map(([name, version]) => `- ${name}: ${version}`).join('\n')}

---

Generated by Web4 Component Documentation Generator
`;

// Write documentation
const overviewPath = resolve(docsPath, 'README.md');
writeFileSync(overviewPath, overview);
console.log(`‚úÖ Generated: docs/README.md`);

// Generate API documentation structure
const apiDoc = `# Web4 User Component API Reference

## Interfaces

### IUser
\`\`\`typescript
interface IUser {
  getUuid(): string;
  getUsername(): string;
  getHostname(): string;
  setUsername(username: string): void;
  setHostname(hostname: string): void;
}
\`\`\`

## Classes

### DefaultUser
Implements the IUser interface with deterministic UUID generation.

#### Methods
- \`constructor()\`: Creates empty user instance
- \`getUuid(): string\`: Returns deterministic UUID based on username
- \`getUsername(): string\`: Returns current username
- \`getHostname(): string\`: Returns current hostname
- \`setUsername(username: string): void\`: Sets username
- \`setHostname(hostname: string): void\`: Sets hostname

## CLI API

### Commands
- \`create <username> [hostname]\`: Create new user scenario
- \`get <username>\`: Get user UUID and details
- \`fix-scenario <file>\`: Fix owner UUID in scenario file
- \`fix-scenarios --all\`: Fix all scenario files
- \`list\`: List all user scenarios

### Options
- \`--help\`: Show help information
- \`--verify\`: Verify component installation
`;

const apiPath = resolve(docsPath, 'API.md');
writeFileSync(apiPath, apiDoc);
console.log(`‚úÖ Generated: docs/API.md`);

console.log('\n‚úÖ Documentation generation complete!');