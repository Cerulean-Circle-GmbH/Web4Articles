@startuml UnitEnhancedArchitecture
!theme toy
title Unit Component - Enhanced Architecture (Proposed)

package "Enhanced Unit Component" <<Rectangle>> {
  
  package "Layer 4 - Scenario Services" <<Cloud>> {
    class UnitScenarioManager {
      🔥 CENTRAL SCENARIO ORCHESTRATION
      --
      -storage: UnitIndexStorage
      -user: DefaultUser
      --
      +saveScenario(type, uuid, data, context)
      +loadScenario(uuid)
      +deleteScenario(uuid, cleanup?)
      +moveScenario(uuid, newLocations)
      +listScenarios(type?, filter?)
      +validateScenario(scenario)
      +getScenarioMetadata(uuid)
      +bulkOperations(scenarios[], operation)
      --
      📊 Type-aware scenario handling
      🎯 Business logic validation
      🔄 Batch operations support
      ✅ Consistent error handling
    }
    
    class UnitViewGenerator {
      🔥 CENTRAL VIEW GENERATION
      --
      -templateProcessor: TemplateProcessor
      -scenarioManager: UnitScenarioManager
      --
      +generateMDView(uuid, templatePath, outputDir?)
      +processTemplate(template, scenario)
      +decodeOwnerDetails(scenario)
      +saveView(uuid, content, directory)
      +generateBulkViews(uuids[], template)
      +getViewTemplate(type)
      +validateTemplate(template)
      --
      📝 Template-agnostic processing
      👤 Integrated owner handling
      🎨 Multiple view format support
      ⚡ Efficient bulk generation
    }
    
    class UnitOverviewBuilder {
      🔥 CENTRAL OVERVIEW GENERATION
      --
      -scenarioManager: UnitScenarioManager
      -viewGenerator: UnitViewGenerator
      --
      +buildOverview(type, directory, options?)
      +aggregateScenarios(filter, groupBy?)
      +generateSummaryStats(scenarios[])
      +updateOverviewFile(directory, content)
      +getOverviewTemplate(type)
      +customizeOverview(template, data)
      +scheduleOverviewUpdate(directory)
      --
      📊 Multi-component aggregation
      📋 Flexible grouping options
      📈 Statistical analysis
      🔄 Auto-update capabilities
    }
    
    class UnitCLIService {
      🔥 CENTRAL CLI PATTERN SERVICE
      --
      -scenarioManager: UnitScenarioManager
      -viewGenerator: UnitViewGenerator
      -overviewBuilder: UnitOverviewBuilder
      --
      +handleCreate(type, args)
      +handleDelete(identifier)
      +handleUpdate(uuid, attribute, value)
      +handleMove(uuid, destination)
      +handleOverview(directory)
      +handleBulk(operation, filter)
      +getUsageHelp(command?)
      --
      🎯 Consistent CLI patterns
      📋 Type-specific behavior
      🔧 Extensible command set
      💬 Standardized help system
    }
  }
  
  package "Layer 3 - Service Interfaces" <<Cloud>> {
    interface ScenarioService {
      +save(type, uuid, data)
      +load(uuid)
      +delete(uuid)
      +list(filter?)
    }
    
    interface ViewService {
      +generate(uuid, template)
      +process(template, data)
      +save(uuid, content, directory)
    }
    
    interface OverviewService {
      +build(type, directory)
      +aggregate(filter)
      +update(directory)
    }
    
    interface CLIService {
      +handle(command, args)
      +getHelp(command?)
    }
  }
  
  package "Layer 2 - Storage (Enhanced)" <<Cloud>> {
    class UnitIndexStorage {
      📊 ENHANCED STORAGE FOUNDATION
      --
      +init(projectRoot)
      +saveScenario(uuid, scenario, symlinks?)
      +loadScenario(uuid)
      +deleteScenario(uuid) ⭐ ENHANCED
      +bulkLoad(uuids[]) ⭐ NEW
      +query(filter) ⭐ NEW
      +getStatistics() ⭐ NEW
      --
      🗂️ UUID-based 5-level storage
      🔗 Enhanced symlink management
      📋 Advanced backlink tracking
      ⚡ Query capabilities
    }
  }
}

package "Simplified Client Components" <<Cloud>> {
  class Web4Requirement_v2 {
    ✅ PURE BUSINESS LOGIC
    --
    -unitServices: UnitCLIService
    --
    +create(title, description)
    +validate()
    +getBusinessRules()
    --
    🎯 Domain-specific logic only
    🔄 Delegates all infrastructure
  }
  
  class Web4ChangeRequest_v2 {
    ✅ PURE BUSINESS LOGIC
    --
    -unitServices: UnitCLIService
    --
    +create(title, description)
    +validate()
    +getRelatedRequirements()
    --
    🎯 Domain-specific logic only
    🔄 Delegates all infrastructure
  }
  
  class Web4TestCase {
    ✅ NEW COMPONENT POSSIBLE
    --
    -unitServices: UnitCLIService
    --
    +create(title, description)
    +execute()
    +getResults()
    --
    🎯 Test-specific logic
    🔄 Inherits all infrastructure
  }
}

' Service layer dependencies
UnitScenarioManager --> UnitIndexStorage : enhanced usage
UnitViewGenerator --> UnitScenarioManager : scenario access
UnitOverviewBuilder --> UnitScenarioManager : scenario aggregation
UnitOverviewBuilder --> UnitViewGenerator : view generation
UnitCLIService --> UnitScenarioManager : delegates storage
UnitCLIService --> UnitViewGenerator : delegates views
UnitCLIService --> UnitOverviewBuilder : delegates overviews

' Interface implementations
UnitScenarioManager --|> ScenarioService : implements
UnitViewGenerator --|> ViewService : implements
UnitOverviewBuilder --|> OverviewService : implements
UnitCLIService --|> CLIService : implements

' Client component dependencies
Web4Requirement_v2 --> UnitCLIService : uses services
Web4ChangeRequest_v2 --> UnitCLIService : uses services
Web4TestCase --> UnitCLIService : uses services

package "Architecture Benefits" <<Rectangle>> {
  note as Benefits
    🎯 **DRY Achievement:**
    - Single scenario management service
    - Centralized view generation
    - Shared CLI patterns
    - Consistent business logic separation
    
    ✅ **Service Architecture:**
    - Clear separation of concerns
    - Testable service boundaries
    - Extensible service interfaces
    - Consistent error handling
    
    🔧 **Developer Experience:**
    - Simple component creation
    - Consistent CLI behavior
    - Reusable service patterns
    - Clear architecture guidelines
    
    📊 **Operational Benefits:**
    - Centralized monitoring
    - Consistent logging
    - Single point for optimizations
    - Unified maintenance
    
    🚀 **Scalability:**
    - Easy to add new scenario types
    - Service-based extension points
    - Modular component architecture
    - Web4-compliant patterns
  end note
}

@enduml
