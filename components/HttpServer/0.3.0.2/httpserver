#!/bin/bash

# Web4 HttpServer Component Shell Starter
# Checks environment, builds dependencies, delegates to CLI
# Following Build component shell starter pattern

set -euo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
COMPONENT_DIR="$SCRIPT_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "🌐 Web4 HttpServer Component v0.3.0.0 - HTTP Server Capability"
echo "📂 Component: $COMPONENT_DIR"

# Use Build component for environment and dependency management
use_build_component() {
    local BUILD_COMPONENT="$COMPONENT_DIR/../../../Build/latest"
    
    if [ -x "$BUILD_COMPONENT/build" ]; then
        echo "🏗️ Using Build component for environment setup..."
        "$BUILD_COMPONENT/build" checkEnvironment
        "$BUILD_COMPONENT/build" buildComponent HttpServer
    else
        echo -e "${YELLOW}⚠️ Build component not available, using fallback...${NC}"
        fallback_build
    fi
}

fallback_build() {
    command -v node >/dev/null 2>&1 || {
        echo -e "${RED}❌ Node.js required but not installed${NC}"
        exit 1
    }
    
    if [ -f "$COMPONENT_DIR/package.json" ] && [ ! -d "$COMPONENT_DIR/dist" ]; then
        echo "🔨 Building HttpServer component..."
        cd "$COMPONENT_DIR"
        npm install
        npm run build
    fi
}

main() {
    echo "🔍 Setting up HttpServer environment..."
    use_build_component
    
    echo "🚀 Delegating to HttpServer CLI..."
    
    if [ -f "$COMPONENT_DIR/dist/ts/layer5/HttpServerCLI.js" ]; then
        node "$COMPONENT_DIR/dist/ts/layer5/HttpServerCLI.js" "$@"
    else
        echo -e "${RED}❌ HttpServer CLI not found. Build may have failed.${NC}"
        exit 1
    fi
}

main "$@"