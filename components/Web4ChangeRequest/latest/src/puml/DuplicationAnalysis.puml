@startuml DuplicationAnalysis
!theme toy
title Code Duplication Analysis: Web4Requirement vs Web4ChangeRequest

package "Duplicated Code Patterns" <<Rectangle>> {
  
  class "Scenario Management" as SM {
    ⚠️ DUPLICATED IN BOTH COMPONENTS
    --
    +saveScenario(uuid, scenario)
    +loadFromScenario(scenarioPath)
    +createScenarioJSON()
    +updateScenarioAttribute()
    +getRequirementsDirectory()
    +getRequirementsMDDirectory()
    --
    📊 Code Size: ~200 lines
    🔄 Logic: Identical UUID storage
    🗂️ Storage: UnitIndexStorage dependency
  }
  
  class "MD View Generation" as MDV {
    ⚠️ DUPLICATED IN BOTH COMPONENTS
    --
    +generateMDView()
    +saveMDView()
    +decodeOwnerDetails()
    +getImplementationStatus()
    --
    📊 Code Size: ~100 lines
    🔄 Logic: Template processing
    📝 Templates: Identical structure
  }
  
  class "CLI Command Handling" as CLI {
    ⚠️ DUPLICATED IN BOTH COMPONENTS
    --
    +handleCreate()
    +handleDelete()
    +handleUpdate()
    +handleMove()
    +showUsage()
    --
    📊 Code Size: ~300 lines
    🔄 Logic: Argument parsing
    💬 Interface: Nearly identical
  }
  
  class "Template Processing" as TP {
    ⚠️ DUPLICATED IN BOTH COMPONENTS
    --
    +processTemplate()
    +loadTemplate()
    +convertToString()
    --
    📊 Code Size: ~50 lines
    🔄 Logic: String replacement
    📁 Files: Identical classes
  }
  
  class "Overview Generation" as OG {
    ⚠️ DUPLICATED IN BOTH COMPONENTS
    --
    +updateOverview()
    +getRequirementFiles()
    +buildOverviewContext()
    --
    📊 Code Size: ~150 lines
    🔄 Logic: File aggregation
    📋 Output: Same format
  }
}

package "Shared Dependencies" <<Cloud>> {
  class UnitIndexStorage {
    🔥 CENTRAL SERVICE
    --
    Used identically by both components
    for UUID-based scenario storage
  }
  
  class DefaultUser {
    🔥 CENTRAL SERVICE
    --
    Used identically by both components
    for owner UUID generation
  }
}

package "DRY Violation Impact" <<Rectangle>> {
  note as DRYImpact
    📊 **Duplication Statistics:**
    - Total duplicated code: ~800+ lines
    - Maintenance overhead: 2x bug fixes
    - Testing overhead: 2x test suites
    - Deployment risk: Inconsistent updates
    
    🎯 **DRY Principle Violations:**
    - Scenario storage logic duplicated
    - Template processing duplicated
    - CLI patterns duplicated
    - Business logic scattered
    
    ⚡ **Architecture Debt:**
    - Components tightly coupled to storage
    - No separation of concerns
    - Difficult to extend or modify
    - Knowledge duplication
  end note
}

SM --> UnitIndexStorage : uses
MDV --> TP : uses
CLI --> SM : orchestrates
CLI --> MDV : orchestrates
OG --> SM : depends on

@enduml
