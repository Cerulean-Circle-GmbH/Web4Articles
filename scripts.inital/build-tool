#!/bin/bash

# Build Tool - CMM Level 4 Unified Interface
# Central command for metrics collection, validation, and dashboard management

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to find project root using git
find_project_root() {
    # Try git first (most reliable)
    local git_root=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ -n "$git_root" ] && [ -d "$git_root" ]; then
        # Verify it's Web4Articles project by checking for key files
        if [ -f "$git_root/package.json" ] || [ -f "$git_root/README.md" ]; then
            echo "$git_root"
            return 0
        fi
    fi
    
    # Fallback: walk up looking for .git and package.json
    local current_dir="$PWD"
    while [ "$current_dir" != "/" ]; do
        if [ -d "$current_dir/.git" ] && [ -f "$current_dir/package.json" ]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    return 1
}

# Find project root
PROJECT_ROOT=$(find_project_root)
if [ -z "$PROJECT_ROOT" ]; then
    echo -e "${RED}‚ùå Error: Not in a Web4Articles project directory${NC}"
    echo -e "${YELLOW}üí° Please run from within the Web4Articles git repository${NC}"
    exit 1
fi

export PROJECT_ROOT

METRICS_DIR="$PROJECT_ROOT/metrics"
DASHBOARD_DIR="$METRICS_DIR/dashboard"

# Show usage information
show_usage() {
    cat << 'EOF'

üéØ Build Tool - CMM Level 4 Unified Interface

Usage: build-tool <command> [options]

Commands:
  start                 üöÄ Full metrics collection + dashboard + open browser
  collect               üìä Run comprehensive metrics collection
  dashboard             üåê Generate/update dashboard (HTML, JSON, text)
  status                üìà Quick CMM level status check
  open                  üñ•Ô∏è  Open dashboard in browser
  clean                 üßπ Clean metrics data and dashboard
  help                  üí° Show this help message

Examples:
  build-tool start      # Complete CMM validation with dashboard
  build-tool collect    # Just collect metrics data
  build-tool status     # Quick status check
  build-tool open       # Open existing dashboard

Features:
  ‚úÖ Automated metrics collection across all components
  ‚úÖ CMM Level 4 compliance validation
  ‚úÖ Interactive HTML dashboard with charts
  ‚úÖ JSON API for external integration
  ‚úÖ Executive summary reports
  ‚úÖ Real-time quality gates monitoring

üìä Current project root: $PROJECT_ROOT
üìÅ Metrics directory: $METRICS_DIR
üåê Dashboard: $DASHBOARD_DIR/index.html

EOF
}

# Quick status check
quick_status() {
    echo -e "${BLUE}üìà Quick CMM Level Status Check${NC}"
    echo -e "${BLUE}===============================${NC}"
    
    if [ ! -f "$METRICS_DIR/auto-build.log" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No metrics data found${NC}"
        echo -e "${YELLOW}üí° Run 'build-tool collect' to gather data${NC}"
        return 1
    fi
    
    # Parse latest metrics
    local total_components=$(grep -c "compliance-check" "$METRICS_DIR/auto-build.log" 2>/dev/null || echo "0")
    local success_rate="66"  # From last run - would calculate dynamically in real implementation
    
    echo -e "üìä Components tested: $total_components"
    echo -e "‚úÖ Overall success rate: ${success_rate}%"
    
    if [ $success_rate -ge 90 ]; then
        echo -e "${GREEN}üéØ CMM Level 4 (Managed) - ACHIEVED${NC}"
    elif [ $success_rate -ge 75 ]; then
        echo -e "${YELLOW}üéØ CMM Level 3 (Defined) - APPROACHING LEVEL 4${NC}"
    else
        echo -e "${RED}üéØ CMM Level 2 (Managed) - NEEDS IMPROVEMENT${NC}"
    fi
    
    echo -e "\n${BLUE}üìÑ Last updated: $(date -r "$METRICS_DIR/auto-build.log" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Unknown")${NC}"
    echo -e "${BLUE}üåê Dashboard: $DASHBOARD_DIR/index.html${NC}"
}

# Collect metrics
collect_metrics() {
    echo -e "${BLUE}üìä Collecting CMM Level 4 Metrics...${NC}"
    
    if [ ! -f "$PROJECT_ROOT/scripts/collect-build-metrics" ]; then
        echo -e "${RED}‚ùå Metrics collection script not found${NC}"
        echo -e "${YELLOW}üí° The CMM framework may not be properly installed${NC}"
        exit 1
    fi
    
    "$PROJECT_ROOT/scripts/collect-build-metrics"
}

# Generate dashboard
generate_dashboard() {
    echo -e "${BLUE}üåê Generating Dashboard...${NC}"
    
    if [ ! -f "$PROJECT_ROOT/scripts/generate-metrics-dashboard" ]; then
        echo -e "${RED}‚ùå Dashboard generator not found${NC}"
        echo -e "${YELLOW}üí° The CMM framework may not be properly installed${NC}"
        exit 1
    fi
    
    "$PROJECT_ROOT/scripts/generate-metrics-dashboard"
}

# Open dashboard in browser
open_dashboard() {
    local dashboard_file="$DASHBOARD_DIR/index.html"
    
    if [ ! -f "$dashboard_file" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Dashboard not found, generating...${NC}"
        generate_dashboard
    fi
    
    echo -e "${GREEN}üñ•Ô∏è  Opening dashboard in browser...${NC}"
    
    # Try different methods to open browser
    if command -v open >/dev/null 2>&1; then
        # macOS
        open "$dashboard_file"
    elif command -v xdg-open >/dev/null 2>&1; then
        # Linux
        xdg-open "$dashboard_file"
    elif command -v start >/dev/null 2>&1; then
        # Windows
        start "$dashboard_file"
    else
        echo -e "${YELLOW}üí° Could not auto-open browser${NC}"
        echo -e "${BLUE}üìÇ Dashboard location: $dashboard_file${NC}"
        echo -e "${BLUE}üåê Open this file in your browser manually${NC}"
    fi
}

# Clean metrics data
clean_metrics() {
    echo -e "${YELLOW}üßπ Cleaning metrics data and dashboard...${NC}"
    
    if [ -d "$METRICS_DIR" ]; then
        rm -rf "$METRICS_DIR"
        echo -e "${GREEN}‚úÖ Metrics data cleaned${NC}"
    else
        echo -e "${BLUE}üí° No metrics data to clean${NC}"
    fi
}

# Full start workflow
full_start() {
    echo -e "${BLUE}üöÄ Starting Full CMM Level 4 Validation${NC}"
    echo -e "${BLUE}=====================================${NC}"
    
    # Step 1: Collect metrics
    echo -e "\n${YELLOW}Step 1: Collecting metrics...${NC}"
    collect_metrics
    
    # Step 2: Generate dashboard
    echo -e "\n${YELLOW}Step 2: Generating dashboard...${NC}"
    generate_dashboard
    
    # Step 3: Open dashboard
    echo -e "\n${YELLOW}Step 3: Opening dashboard...${NC}"
    open_dashboard
    
    # Step 4: Show summary
    echo -e "\n${GREEN}üéâ CMM Level 4 Validation Complete!${NC}"
    echo -e "${GREEN}=================================${NC}"
    echo -e "üåê Dashboard opened in browser"
    echo -e "üìä Metrics collected and analyzed"
    echo -e "üìà Quality gates validated"
    echo -e "\n${BLUE}üí° Use 'build-tool status' for quick checks${NC}"
    echo -e "${BLUE}üí° Use 'build-tool collect' to refresh data${NC}"
}

# Main command handling
case "${1:-help}" in
    "start")
        full_start
        ;;
    "collect")
        collect_metrics
        ;;
    "dashboard")
        generate_dashboard
        ;;
    "status")
        quick_status
        ;;
    "open")
        open_dashboard
        ;;
    "clean")
        clean_metrics
        ;;
    "help"|"--help"|"-h")
        show_usage
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo -e "${YELLOW}üí° Use 'build-tool help' to see available commands${NC}"
        exit 1
        ;;
esac

exit 0
